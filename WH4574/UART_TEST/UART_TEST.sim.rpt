Simulator report for UART_TEST
Fri Jan 03 22:03:52 2014
Quartus II Version 9.0 Build 132 02/25/2009 SJ Full Version


---------------------
; Table of Contents ;
---------------------
  1. Legal Notice
  2. Simulator Summary
  3. Simulator Settings
  4. Simulation Waveforms
  5. Coverage Summary
  6. Complete 1/0-Value Coverage
  7. Missing 1-Value Coverage
  8. Missing 0-Value Coverage
  9. Simulator INI Usage
 10. Simulator Messages



----------------
; Legal Notice ;
----------------
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.



+--------------------------------------------+
; Simulator Summary                          ;
+-----------------------------+--------------+
; Type                        ; Value        ;
+-----------------------------+--------------+
; Simulation Start Time       ; 0 ps         ;
; Simulation End Time         ; 50.0 us      ;
; Simulation Netlist Size     ; 317 nodes    ;
; Simulation Coverage         ;      52.37 % ;
; Total Number of Transitions ; 44560        ;
; Simulation Breakpoints      ; 0            ;
; Family                      ; Cyclone III  ;
; Device                      ; EP3C10E144C8 ;
+-----------------------------+--------------+


+-------------------------------------------------------------------------------------------------------------------------+
; Simulator Settings                                                                                                      ;
+--------------------------------------------------------------------------------------------+------------+---------------+
; Option                                                                                     ; Setting    ; Default Value ;
+--------------------------------------------------------------------------------------------+------------+---------------+
; Simulation mode                                                                            ; Timing     ; Timing        ;
; Start time                                                                                 ; 0 ns       ; 0 ns          ;
; Simulation results format                                                                  ; CVWF       ;               ;
; Vector input source                                                                        ; TEST.vwf   ;               ;
; Add pins automatically to simulation output waveforms                                      ; On         ; On            ;
; Check outputs                                                                              ; Off        ; Off           ;
; Report simulation coverage                                                                 ; On         ; On            ;
; Display complete 1/0 value coverage report                                                 ; On         ; On            ;
; Display missing 1-value coverage report                                                    ; On         ; On            ;
; Display missing 0-value coverage report                                                    ; On         ; On            ;
; Detect setup and hold time violations                                                      ; Off        ; Off           ;
; Detect glitches                                                                            ; Off        ; Off           ;
; Disable timing delays in Timing Simulation                                                 ; Off        ; Off           ;
; Generate Signal Activity File                                                              ; Off        ; Off           ;
; Generate VCD File for PowerPlay Power Analyzer                                             ; Off        ; Off           ;
; Group bus channels in simulation results                                                   ; Off        ; Off           ;
; Preserve fewer signal transitions to reduce memory requirements                            ; On         ; On            ;
; Trigger vector comparison with the specified mode                                          ; INPUT_EDGE ; INPUT_EDGE    ;
; Disable setup and hold time violations detection in input registers of bi-directional pins ; Off        ; Off           ;
; Overwrite Waveform Inputs With Simulation Outputs                                          ; On         ;               ;
; Perform Glitch Filtering in Timing Simulation                                              ; Auto       ; Auto          ;
; Interconnect Delay Model Type                                                              ; Transport  ; Transport     ;
; Cell Delay Model Type                                                                      ; Transport  ; Transport     ;
+--------------------------------------------------------------------------------------------+------------+---------------+


+----------------------+
; Simulation Waveforms ;
+----------------------+
Waveform report data cannot be output to ASCII.
Please use Quartus II to view the waveform report data.


+--------------------------------------------------------------------+
; Coverage Summary                                                   ;
+-----------------------------------------------------+--------------+
; Type                                                ; Value        ;
+-----------------------------------------------------+--------------+
; Total coverage as a percentage                      ;      52.37 % ;
; Total nodes checked                                 ; 317          ;
; Total output ports checked                          ; 317          ;
; Total output ports with complete 1/0-value coverage ; 166          ;
; Total output ports with no 1/0-value coverage       ; 151          ;
; Total output ports with no 1-value coverage         ; 151          ;
; Total output ports with no 0-value coverage         ; 151          ;
+-----------------------------------------------------+--------------+


The following table displays output ports that toggle between 1 and 0 during simulation.
+--------------------------------------------------------------------------------------------------+
; Complete 1/0-Value Coverage                                                                      ;
+---------------------------------------+---------------------------------------+------------------+
; Node Name                             ; Output Port Name                      ; Output Port Type ;
+---------------------------------------+---------------------------------------+------------------+
; |TEST|UART_TEST:inst1|re              ; |TEST|UART_TEST:inst1|re              ; q                ;
; |TEST|UART_TEST:inst1|finish          ; |TEST|UART_TEST:inst1|finish          ; q                ;
; |TEST|UART_TEST:inst1|dat_o[8]        ; |TEST|UART_TEST:inst1|dat_o[8]        ; q                ;
; |TEST|UART_TEST:inst1|dat_o[7]        ; |TEST|UART_TEST:inst1|dat_o[7]        ; q                ;
; |TEST|UART_TEST:inst1|dat_o[6]        ; |TEST|UART_TEST:inst1|dat_o[6]        ; q                ;
; |TEST|UART_TEST:inst1|dat_o[5]        ; |TEST|UART_TEST:inst1|dat_o[5]        ; q                ;
; |TEST|UART_TEST:inst1|dat_o[4]        ; |TEST|UART_TEST:inst1|dat_o[4]        ; q                ;
; |TEST|UART_TEST:inst1|dat_o[3]        ; |TEST|UART_TEST:inst1|dat_o[3]        ; q                ;
; |TEST|UART_TEST:inst1|dat_o[2]        ; |TEST|UART_TEST:inst1|dat_o[2]        ; q                ;
; |TEST|UART_TEST:inst1|dat_o[1]        ; |TEST|UART_TEST:inst1|dat_o[1]        ; q                ;
; |TEST|UART_TEST:inst1|nx_s.s1         ; |TEST|UART_TEST:inst1|nx_s.s1         ; q                ;
; |TEST|UART_TEST:inst1|timed           ; |TEST|UART_TEST:inst1|timed           ; q                ;
; |TEST|UART_TEST:inst1|re~3            ; |TEST|UART_TEST:inst1|re~3            ; combout          ;
; |TEST|UART_TEST:inst1|nx_s.s0         ; |TEST|UART_TEST:inst1|nx_s.s0         ; q                ;
; |TEST|UART_TEST:inst1|Selector0~0     ; |TEST|UART_TEST:inst1|Selector0~0     ; combout          ;
; |TEST|UART_TEST:inst1|Selector0~1     ; |TEST|UART_TEST:inst1|Selector0~1     ; combout          ;
; |TEST|UART_TEST:inst1|Selector0~2     ; |TEST|UART_TEST:inst1|Selector0~2     ; combout          ;
; |TEST|UART_TEST:inst|start            ; |TEST|UART_TEST:inst|start            ; q                ;
; |TEST|UART_TEST:inst1|clk_out         ; |TEST|UART_TEST:inst1|clk_out         ; q                ;
; |TEST|UART_TEST:inst1|start           ; |TEST|UART_TEST:inst1|start           ; q                ;
; |TEST|UART_TEST:inst1|dat_o[0]        ; |TEST|UART_TEST:inst1|dat_o[0]        ; q                ;
; |TEST|UART_TEST:inst|nx_s.s0          ; |TEST|UART_TEST:inst|nx_s.s0          ; q                ;
; |TEST|UART_TEST:inst1|Selector8~0     ; |TEST|UART_TEST:inst1|Selector8~0     ; combout          ;
; |TEST|UART_TEST:inst1|\rec:count[3]   ; |TEST|UART_TEST:inst1|\rec:count[3]   ; q                ;
; |TEST|UART_TEST:inst1|\rec:count[0]   ; |TEST|UART_TEST:inst1|\rec:count[0]   ; q                ;
; |TEST|UART_TEST:inst1|\rec:count[2]   ; |TEST|UART_TEST:inst1|\rec:count[2]   ; q                ;
; |TEST|UART_TEST:inst1|\rec:count[1]   ; |TEST|UART_TEST:inst1|\rec:count[1]   ; q                ;
; |TEST|UART_TEST:inst1|Equal1~0        ; |TEST|UART_TEST:inst1|Equal1~0        ; combout          ;
; |TEST|UART_TEST:inst1|timed~0         ; |TEST|UART_TEST:inst1|timed~0         ; combout          ;
; |TEST|UART_TEST:inst1|Selector7~0     ; |TEST|UART_TEST:inst1|Selector7~0     ; combout          ;
; |TEST|UART_TEST:inst1|Selector7~1     ; |TEST|UART_TEST:inst1|Selector7~1     ; combout          ;
; |TEST|UART_TEST:inst|mode.send        ; |TEST|UART_TEST:inst|mode.send        ; q                ;
; |TEST|UART_TEST:inst|t                ; |TEST|UART_TEST:inst|t                ; q                ;
; |TEST|UART_TEST:inst|tx~2             ; |TEST|UART_TEST:inst|tx~2             ; combout          ;
; |TEST|UART_TEST:inst|tx               ; |TEST|UART_TEST:inst|tx               ; combout          ;
; |TEST|UART_TEST:inst|nx_s.s2          ; |TEST|UART_TEST:inst|nx_s.s2          ; q                ;
; |TEST|UART_TEST:inst|timed2           ; |TEST|UART_TEST:inst|timed2           ; q                ;
; |TEST|UART_TEST:inst|Selector4~0      ; |TEST|UART_TEST:inst|Selector4~0      ; combout          ;
; |TEST|UART_TEST:inst|nx_s.s3          ; |TEST|UART_TEST:inst|nx_s.s3          ; q                ;
; |TEST|UART_TEST:inst|mode.receive~4   ; |TEST|UART_TEST:inst|mode.receive~4   ; combout          ;
; |TEST|UART_TEST:inst|Selector4~1      ; |TEST|UART_TEST:inst|Selector4~1      ; combout          ;
; |TEST|UART_TEST:inst1|\cdiv:cnt[4]    ; |TEST|UART_TEST:inst1|\cdiv:cnt[4]    ; q                ;
; |TEST|UART_TEST:inst1|\cdiv:cnt[3]    ; |TEST|UART_TEST:inst1|\cdiv:cnt[3]    ; q                ;
; |TEST|UART_TEST:inst1|\cdiv:cnt[2]    ; |TEST|UART_TEST:inst1|\cdiv:cnt[2]    ; q                ;
; |TEST|UART_TEST:inst1|\cdiv:cnt[0]    ; |TEST|UART_TEST:inst1|\cdiv:cnt[0]    ; q                ;
; |TEST|UART_TEST:inst1|\cdiv:cnt[1]    ; |TEST|UART_TEST:inst1|\cdiv:cnt[1]    ; q                ;
; |TEST|UART_TEST:inst1|Add0~0          ; |TEST|UART_TEST:inst1|Add0~0          ; combout          ;
; |TEST|UART_TEST:inst1|Add0~1          ; |TEST|UART_TEST:inst1|Add0~1          ; combout          ;
; |TEST|UART_TEST:inst1|Equal0~0        ; |TEST|UART_TEST:inst1|Equal0~0        ; combout          ;
; |TEST|UART_TEST:inst1|clk_out~0       ; |TEST|UART_TEST:inst1|clk_out~0       ; combout          ;
; |TEST|UART_TEST:inst1|en              ; |TEST|UART_TEST:inst1|en              ; q                ;
; |TEST|UART_TEST:inst1|Selector4~1     ; |TEST|UART_TEST:inst1|Selector4~1     ; combout          ;
; |TEST|UART_TEST:inst|Selector7~1      ; |TEST|UART_TEST:inst|Selector7~1      ; combout          ;
; |TEST|UART_TEST:inst1|mode.receive    ; |TEST|UART_TEST:inst1|mode.receive    ; q                ;
; |TEST|UART_TEST:inst1|tx              ; |TEST|UART_TEST:inst1|tx              ; combout          ;
; |TEST|UART_TEST:inst1|count~12        ; |TEST|UART_TEST:inst1|count~12        ; combout          ;
; |TEST|UART_TEST:inst1|Add1~0          ; |TEST|UART_TEST:inst1|Add1~0          ; combout          ;
; |TEST|UART_TEST:inst1|Add1~1          ; |TEST|UART_TEST:inst1|Add1~1          ; combout          ;
; |TEST|UART_TEST:inst|Selector2~0      ; |TEST|UART_TEST:inst|Selector2~0      ; combout          ;
; |TEST|UART_TEST:inst|Selector2~1      ; |TEST|UART_TEST:inst|Selector2~1      ; combout          ;
; |TEST|UART_TEST:inst|dat[8]~_emulated ; |TEST|UART_TEST:inst|dat[8]~_emulated ; q                ;
; |TEST|UART_TEST:inst|start2           ; |TEST|UART_TEST:inst|start2           ; q                ;
; |TEST|UART_TEST:inst|dat[8]~head_lut  ; |TEST|UART_TEST:inst|dat[8]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst|mode.receive~5   ; |TEST|UART_TEST:inst|mode.receive~5   ; combout          ;
; |TEST|UART_TEST:inst|\sen:count[3]    ; |TEST|UART_TEST:inst|\sen:count[3]    ; q                ;
; |TEST|UART_TEST:inst|\sen:count[0]    ; |TEST|UART_TEST:inst|\sen:count[0]    ; q                ;
; |TEST|UART_TEST:inst|\sen:count[2]    ; |TEST|UART_TEST:inst|\sen:count[2]    ; q                ;
; |TEST|UART_TEST:inst|\sen:count[1]    ; |TEST|UART_TEST:inst|\sen:count[1]    ; q                ;
; |TEST|UART_TEST:inst|Equal2~0         ; |TEST|UART_TEST:inst|Equal2~0         ; combout          ;
; |TEST|UART_TEST:inst|timed2~0         ; |TEST|UART_TEST:inst|timed2~0         ; combout          ;
; |TEST|UART_TEST:inst|Selector10~2     ; |TEST|UART_TEST:inst|Selector10~2     ; combout          ;
; |TEST|UART_TEST:inst1|cnt~7           ; |TEST|UART_TEST:inst1|cnt~7           ; combout          ;
; |TEST|UART_TEST:inst1|Add0~2          ; |TEST|UART_TEST:inst1|Add0~2          ; combout          ;
; |TEST|UART_TEST:inst1|cnt~8           ; |TEST|UART_TEST:inst1|cnt~8           ; combout          ;
; |TEST|UART_TEST:inst1|Add0~3          ; |TEST|UART_TEST:inst1|Add0~3          ; combout          ;
; |TEST|UART_TEST:inst1|Selector6~0     ; |TEST|UART_TEST:inst1|Selector6~0     ; combout          ;
; |TEST|UART_TEST:inst1|Selector8~1     ; |TEST|UART_TEST:inst1|Selector8~1     ; combout          ;
; |TEST|UART_TEST:inst1|mode.receive~5  ; |TEST|UART_TEST:inst1|mode.receive~5  ; combout          ;
; |TEST|UART_TEST:inst1|mode.receive~6  ; |TEST|UART_TEST:inst1|mode.receive~6  ; combout          ;
; |TEST|UART_TEST:inst|dat[8]~data_lut  ; |TEST|UART_TEST:inst|dat[8]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst|Selector5~0      ; |TEST|UART_TEST:inst|Selector5~0      ; combout          ;
; |TEST|UART_TEST:inst|Selector5~1      ; |TEST|UART_TEST:inst|Selector5~1      ; combout          ;
; |TEST|UART_TEST:inst|count~13         ; |TEST|UART_TEST:inst|count~13         ; combout          ;
; |TEST|UART_TEST:inst|Add2~0           ; |TEST|UART_TEST:inst|Add2~0           ; combout          ;
; |TEST|UART_TEST:inst|Add2~1           ; |TEST|UART_TEST:inst|Add2~1           ; combout          ;
; |TEST|UART_TEST:inst|dat[7]~_emulated ; |TEST|UART_TEST:inst|dat[7]~_emulated ; q                ;
; |TEST|UART_TEST:inst|dat[7]~head_lut  ; |TEST|UART_TEST:inst|dat[7]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst|dat[7]~data_lut  ; |TEST|UART_TEST:inst|dat[7]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst|dat[6]~_emulated ; |TEST|UART_TEST:inst|dat[6]~_emulated ; q                ;
; |TEST|UART_TEST:inst|dat[6]~head_lut  ; |TEST|UART_TEST:inst|dat[6]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst|dat[6]~data_lut  ; |TEST|UART_TEST:inst|dat[6]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst|dat[5]~_emulated ; |TEST|UART_TEST:inst|dat[5]~_emulated ; q                ;
; |TEST|UART_TEST:inst|dat[5]~head_lut  ; |TEST|UART_TEST:inst|dat[5]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst|dat[5]~data_lut  ; |TEST|UART_TEST:inst|dat[5]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst|dat[4]~_emulated ; |TEST|UART_TEST:inst|dat[4]~_emulated ; q                ;
; |TEST|UART_TEST:inst|dat[4]~head_lut  ; |TEST|UART_TEST:inst|dat[4]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst|dat[4]~data_lut  ; |TEST|UART_TEST:inst|dat[4]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst|dat[3]~_emulated ; |TEST|UART_TEST:inst|dat[3]~_emulated ; q                ;
; |TEST|UART_TEST:inst|dat[3]~head_lut  ; |TEST|UART_TEST:inst|dat[3]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst|dat[3]~data_lut  ; |TEST|UART_TEST:inst|dat[3]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst|dat[2]~_emulated ; |TEST|UART_TEST:inst|dat[2]~_emulated ; q                ;
; |TEST|UART_TEST:inst|dat[2]~head_lut  ; |TEST|UART_TEST:inst|dat[2]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst|dat[2]~data_lut  ; |TEST|UART_TEST:inst|dat[2]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst|dat[1]~_emulated ; |TEST|UART_TEST:inst|dat[1]~_emulated ; q                ;
; |TEST|UART_TEST:inst|dat[1]~head_lut  ; |TEST|UART_TEST:inst|dat[1]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|cnt~9           ; |TEST|UART_TEST:inst1|cnt~9           ; combout          ;
; |TEST|UART_TEST:inst1|count~14        ; |TEST|UART_TEST:inst1|count~14        ; combout          ;
; |TEST|UART_TEST:inst|count~15         ; |TEST|UART_TEST:inst|count~15         ; combout          ;
; |TEST|UART_TEST:inst|dat[8]~latch     ; |TEST|UART_TEST:inst|dat[8]~latch     ; combout          ;
; |TEST|UART_TEST:inst|dat[7]~latch     ; |TEST|UART_TEST:inst|dat[7]~latch     ; combout          ;
; |TEST|UART_TEST:inst|dat[6]~latch     ; |TEST|UART_TEST:inst|dat[6]~latch     ; combout          ;
; |TEST|UART_TEST:inst|dat[5]~latch     ; |TEST|UART_TEST:inst|dat[5]~latch     ; combout          ;
; |TEST|UART_TEST:inst|dat[4]~latch     ; |TEST|UART_TEST:inst|dat[4]~latch     ; combout          ;
; |TEST|UART_TEST:inst|dat[3]~latch     ; |TEST|UART_TEST:inst|dat[3]~latch     ; combout          ;
; |TEST|UART_TEST:inst|dat[2]~latch     ; |TEST|UART_TEST:inst|dat[2]~latch     ; combout          ;
; |TEST|UART_TEST:inst|dat[1]~latch     ; |TEST|UART_TEST:inst|dat[1]~latch     ; combout          ;
; |TEST|re2~output                      ; |TEST|re2~output                      ; o                ;
; |TEST|re2                             ; |TEST|re2                             ; padout           ;
; |TEST|finish2~output                  ; |TEST|finish2~output                  ; o                ;
; |TEST|finish2                         ; |TEST|finish2                         ; padout           ;
; |TEST|dat_out2[7]~output              ; |TEST|dat_out2[7]~output              ; o                ;
; |TEST|dat_out2[7]                     ; |TEST|dat_out2[7]                     ; padout           ;
; |TEST|dat_out2[6]~output              ; |TEST|dat_out2[6]~output              ; o                ;
; |TEST|dat_out2[6]                     ; |TEST|dat_out2[6]                     ; padout           ;
; |TEST|dat_out2[5]~output              ; |TEST|dat_out2[5]~output              ; o                ;
; |TEST|dat_out2[5]                     ; |TEST|dat_out2[5]                     ; padout           ;
; |TEST|dat_out2[4]~output              ; |TEST|dat_out2[4]~output              ; o                ;
; |TEST|dat_out2[4]                     ; |TEST|dat_out2[4]                     ; padout           ;
; |TEST|dat_out2[3]~output              ; |TEST|dat_out2[3]~output              ; o                ;
; |TEST|dat_out2[3]                     ; |TEST|dat_out2[3]                     ; padout           ;
; |TEST|dat_out2[2]~output              ; |TEST|dat_out2[2]~output              ; o                ;
; |TEST|dat_out2[2]                     ; |TEST|dat_out2[2]                     ; padout           ;
; |TEST|dat_out2[1]~output              ; |TEST|dat_out2[1]~output              ; o                ;
; |TEST|dat_out2[1]                     ; |TEST|dat_out2[1]                     ; padout           ;
; |TEST|dat_out2[0]~output              ; |TEST|dat_out2[0]~output              ; o                ;
; |TEST|dat_out2[0]                     ; |TEST|dat_out2[0]                     ; padout           ;
; |TEST|clk~input                       ; |TEST|clk~input                       ; o                ;
; |TEST|clk                             ; |TEST|clk                             ; padout           ;
; |TEST|dat_in1[7]~input                ; |TEST|dat_in1[7]~input                ; o                ;
; |TEST|dat_in1[7]                      ; |TEST|dat_in1[7]                      ; padout           ;
; |TEST|dat_in1[6]~input                ; |TEST|dat_in1[6]~input                ; o                ;
; |TEST|dat_in1[6]                      ; |TEST|dat_in1[6]                      ; padout           ;
; |TEST|dat_in1[5]~input                ; |TEST|dat_in1[5]~input                ; o                ;
; |TEST|dat_in1[5]                      ; |TEST|dat_in1[5]                      ; padout           ;
; |TEST|dat_in1[4]~input                ; |TEST|dat_in1[4]~input                ; o                ;
; |TEST|dat_in1[4]                      ; |TEST|dat_in1[4]                      ; padout           ;
; |TEST|dat_in1[3]~input                ; |TEST|dat_in1[3]~input                ; o                ;
; |TEST|dat_in1[3]                      ; |TEST|dat_in1[3]                      ; padout           ;
; |TEST|dat_in1[2]~input                ; |TEST|dat_in1[2]~input                ; o                ;
; |TEST|dat_in1[2]                      ; |TEST|dat_in1[2]                      ; padout           ;
; |TEST|dat_in1[1]~input                ; |TEST|dat_in1[1]~input                ; o                ;
; |TEST|dat_in1[1]                      ; |TEST|dat_in1[1]                      ; padout           ;
; |TEST|dat_in1[0]~input                ; |TEST|dat_in1[0]~input                ; o                ;
; |TEST|dat_in1[0]                      ; |TEST|dat_in1[0]                      ; padout           ;
; |TEST|UART_TEST:inst1|tx~clkctrl      ; |TEST|UART_TEST:inst1|tx~clkctrl      ; outclk           ;
; |TEST|UART_TEST:inst1|clk_out~clkctrl ; |TEST|UART_TEST:inst1|clk_out~clkctrl ; outclk           ;
; |TEST|clk~inputclkctrl                ; |TEST|clk~inputclkctrl                ; outclk           ;
; |TEST|UART_TEST:inst|tx~clkctrl       ; |TEST|UART_TEST:inst|tx~clkctrl       ; outclk           ;
; |TEST|UART_TEST:inst|start2~clkctrl   ; |TEST|UART_TEST:inst|start2~clkctrl   ; outclk           ;
; |TEST|UART_TEST:inst1|dat_o[8]~feeder ; |TEST|UART_TEST:inst1|dat_o[8]~feeder ; combout          ;
; |TEST|UART_TEST:inst1|dat_o[7]~feeder ; |TEST|UART_TEST:inst1|dat_o[7]~feeder ; combout          ;
; |TEST|UART_TEST:inst1|dat_o[6]~feeder ; |TEST|UART_TEST:inst1|dat_o[6]~feeder ; combout          ;
; |TEST|UART_TEST:inst1|dat_o[5]~feeder ; |TEST|UART_TEST:inst1|dat_o[5]~feeder ; combout          ;
; |TEST|UART_TEST:inst1|dat_o[4]~feeder ; |TEST|UART_TEST:inst1|dat_o[4]~feeder ; combout          ;
; |TEST|UART_TEST:inst1|dat_o[3]~feeder ; |TEST|UART_TEST:inst1|dat_o[3]~feeder ; combout          ;
; |TEST|UART_TEST:inst1|clk_out~feeder  ; |TEST|UART_TEST:inst1|clk_out~feeder  ; combout          ;
+---------------------------------------+---------------------------------------+------------------+


The following table displays output ports that do not toggle to 1 during simulation.
+----------------------------------------------------------------------------------------------------+
; Missing 1-Value Coverage                                                                           ;
+----------------------------------------+----------------------------------------+------------------+
; Node Name                              ; Output Port Name                       ; Output Port Type ;
+----------------------------------------+----------------------------------------+------------------+
; |TEST|UART_TEST:inst|re                ; |TEST|UART_TEST:inst|re                ; q                ;
; |TEST|UART_TEST:inst|dat_o[8]          ; |TEST|UART_TEST:inst|dat_o[8]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[7]          ; |TEST|UART_TEST:inst|dat_o[7]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[6]          ; |TEST|UART_TEST:inst|dat_o[6]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[5]          ; |TEST|UART_TEST:inst|dat_o[5]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[4]          ; |TEST|UART_TEST:inst|dat_o[4]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[3]          ; |TEST|UART_TEST:inst|dat_o[3]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[2]          ; |TEST|UART_TEST:inst|dat_o[2]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[1]          ; |TEST|UART_TEST:inst|dat_o[1]          ; q                ;
; |TEST|UART_TEST:inst|nx_s.s1           ; |TEST|UART_TEST:inst|nx_s.s1           ; q                ;
; |TEST|UART_TEST:inst|timed             ; |TEST|UART_TEST:inst|timed             ; q                ;
; |TEST|UART_TEST:inst|re~3              ; |TEST|UART_TEST:inst|re~3              ; combout          ;
; |TEST|UART_TEST:inst1|nx_s.s2          ; |TEST|UART_TEST:inst1|nx_s.s2          ; q                ;
; |TEST|UART_TEST:inst1|timed2           ; |TEST|UART_TEST:inst1|timed2           ; q                ;
; |TEST|UART_TEST:inst1|nx_s.s3          ; |TEST|UART_TEST:inst1|nx_s.s3          ; q                ;
; |TEST|UART_TEST:inst|clk_out           ; |TEST|UART_TEST:inst|clk_out           ; q                ;
; |TEST|UART_TEST:inst|dat_o[0]          ; |TEST|UART_TEST:inst|dat_o[0]          ; q                ;
; |TEST|UART_TEST:inst|Selector8~0       ; |TEST|UART_TEST:inst|Selector8~0       ; combout          ;
; |TEST|UART_TEST:inst|\rec:count[3]     ; |TEST|UART_TEST:inst|\rec:count[3]     ; q                ;
; |TEST|UART_TEST:inst|\rec:count[0]     ; |TEST|UART_TEST:inst|\rec:count[0]     ; q                ;
; |TEST|UART_TEST:inst|\rec:count[2]     ; |TEST|UART_TEST:inst|\rec:count[2]     ; q                ;
; |TEST|UART_TEST:inst|\rec:count[1]     ; |TEST|UART_TEST:inst|\rec:count[1]     ; q                ;
; |TEST|UART_TEST:inst|Equal1~0          ; |TEST|UART_TEST:inst|Equal1~0          ; combout          ;
; |TEST|UART_TEST:inst|timed~0           ; |TEST|UART_TEST:inst|timed~0           ; combout          ;
; |TEST|UART_TEST:inst1|Selector9~0      ; |TEST|UART_TEST:inst1|Selector9~0      ; combout          ;
; |TEST|UART_TEST:inst1|Selector9~1      ; |TEST|UART_TEST:inst1|Selector9~1      ; combout          ;
; |TEST|UART_TEST:inst1|\sen:count[3]    ; |TEST|UART_TEST:inst1|\sen:count[3]    ; q                ;
; |TEST|UART_TEST:inst1|\sen:count[0]    ; |TEST|UART_TEST:inst1|\sen:count[0]    ; q                ;
; |TEST|UART_TEST:inst1|\sen:count[2]    ; |TEST|UART_TEST:inst1|\sen:count[2]    ; q                ;
; |TEST|UART_TEST:inst1|\sen:count[1]    ; |TEST|UART_TEST:inst1|\sen:count[1]    ; q                ;
; |TEST|UART_TEST:inst1|Equal2~0         ; |TEST|UART_TEST:inst1|Equal2~0         ; combout          ;
; |TEST|UART_TEST:inst1|timed2~0         ; |TEST|UART_TEST:inst1|timed2~0         ; combout          ;
; |TEST|UART_TEST:inst1|start2           ; |TEST|UART_TEST:inst1|start2           ; q                ;
; |TEST|UART_TEST:inst|mode.receive      ; |TEST|UART_TEST:inst|mode.receive      ; q                ;
; |TEST|UART_TEST:inst1|Selector10~2     ; |TEST|UART_TEST:inst1|Selector10~2     ; combout          ;
; |TEST|UART_TEST:inst|\cdiv:cnt[4]      ; |TEST|UART_TEST:inst|\cdiv:cnt[4]      ; q                ;
; |TEST|UART_TEST:inst|\cdiv:cnt[3]      ; |TEST|UART_TEST:inst|\cdiv:cnt[3]      ; q                ;
; |TEST|UART_TEST:inst|\cdiv:cnt[2]      ; |TEST|UART_TEST:inst|\cdiv:cnt[2]      ; q                ;
; |TEST|UART_TEST:inst|\cdiv:cnt[0]      ; |TEST|UART_TEST:inst|\cdiv:cnt[0]      ; q                ;
; |TEST|UART_TEST:inst|\cdiv:cnt[1]      ; |TEST|UART_TEST:inst|\cdiv:cnt[1]      ; q                ;
; |TEST|UART_TEST:inst|Add0~0            ; |TEST|UART_TEST:inst|Add0~0            ; combout          ;
; |TEST|UART_TEST:inst|Add0~1            ; |TEST|UART_TEST:inst|Add0~1            ; combout          ;
; |TEST|UART_TEST:inst|Equal0~0          ; |TEST|UART_TEST:inst|Equal0~0          ; combout          ;
; |TEST|UART_TEST:inst|clk_out~0         ; |TEST|UART_TEST:inst|clk_out~0         ; combout          ;
; |TEST|UART_TEST:inst|en                ; |TEST|UART_TEST:inst|en                ; q                ;
; |TEST|UART_TEST:inst1|Selector4~0      ; |TEST|UART_TEST:inst1|Selector4~0      ; combout          ;
; |TEST|UART_TEST:inst1|mode.receive~4   ; |TEST|UART_TEST:inst1|mode.receive~4   ; combout          ;
; |TEST|UART_TEST:inst|Selector7~0       ; |TEST|UART_TEST:inst|Selector7~0       ; combout          ;
; |TEST|UART_TEST:inst1|mode.send        ; |TEST|UART_TEST:inst1|mode.send        ; q                ;
; |TEST|UART_TEST:inst1|t                ; |TEST|UART_TEST:inst1|t                ; q                ;
; |TEST|UART_TEST:inst1|tx~2             ; |TEST|UART_TEST:inst1|tx~2             ; combout          ;
; |TEST|UART_TEST:inst|count~12          ; |TEST|UART_TEST:inst|count~12          ; combout          ;
; |TEST|UART_TEST:inst|Add1~0            ; |TEST|UART_TEST:inst|Add1~0            ; combout          ;
; |TEST|UART_TEST:inst|Add1~1            ; |TEST|UART_TEST:inst|Add1~1            ; combout          ;
; |TEST|UART_TEST:inst1|count~13         ; |TEST|UART_TEST:inst1|count~13         ; combout          ;
; |TEST|UART_TEST:inst1|Add2~0           ; |TEST|UART_TEST:inst1|Add2~0           ; combout          ;
; |TEST|UART_TEST:inst1|Add2~1           ; |TEST|UART_TEST:inst1|Add2~1           ; combout          ;
; |TEST|UART_TEST:inst1|Selector5~0      ; |TEST|UART_TEST:inst1|Selector5~0      ; combout          ;
; |TEST|UART_TEST:inst1|Selector5~1      ; |TEST|UART_TEST:inst1|Selector5~1      ; combout          ;
; |TEST|UART_TEST:inst|mode.receive~6    ; |TEST|UART_TEST:inst|mode.receive~6    ; combout          ;
; |TEST|UART_TEST:inst|cnt~7             ; |TEST|UART_TEST:inst|cnt~7             ; combout          ;
; |TEST|UART_TEST:inst|Add0~2            ; |TEST|UART_TEST:inst|Add0~2            ; combout          ;
; |TEST|UART_TEST:inst|cnt~8             ; |TEST|UART_TEST:inst|cnt~8             ; combout          ;
; |TEST|UART_TEST:inst|Add0~3            ; |TEST|UART_TEST:inst|Add0~3            ; combout          ;
; |TEST|UART_TEST:inst|Selector6~0       ; |TEST|UART_TEST:inst|Selector6~0       ; combout          ;
; |TEST|UART_TEST:inst1|Selector2~0      ; |TEST|UART_TEST:inst1|Selector2~0      ; combout          ;
; |TEST|UART_TEST:inst1|dat[8]~_emulated ; |TEST|UART_TEST:inst1|dat[8]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[8]~head_lut  ; |TEST|UART_TEST:inst1|dat[8]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[8]~data_lut  ; |TEST|UART_TEST:inst1|dat[8]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[7]~_emulated ; |TEST|UART_TEST:inst1|dat[7]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[7]~head_lut  ; |TEST|UART_TEST:inst1|dat[7]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[7]~data_lut  ; |TEST|UART_TEST:inst1|dat[7]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[6]~_emulated ; |TEST|UART_TEST:inst1|dat[6]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[6]~head_lut  ; |TEST|UART_TEST:inst1|dat[6]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[6]~data_lut  ; |TEST|UART_TEST:inst1|dat[6]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[5]~_emulated ; |TEST|UART_TEST:inst1|dat[5]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[5]~head_lut  ; |TEST|UART_TEST:inst1|dat[5]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[5]~data_lut  ; |TEST|UART_TEST:inst1|dat[5]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[4]~_emulated ; |TEST|UART_TEST:inst1|dat[4]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[4]~head_lut  ; |TEST|UART_TEST:inst1|dat[4]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[4]~data_lut  ; |TEST|UART_TEST:inst1|dat[4]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[3]~_emulated ; |TEST|UART_TEST:inst1|dat[3]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[3]~head_lut  ; |TEST|UART_TEST:inst1|dat[3]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[3]~data_lut  ; |TEST|UART_TEST:inst1|dat[3]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[2]~_emulated ; |TEST|UART_TEST:inst1|dat[2]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[2]~head_lut  ; |TEST|UART_TEST:inst1|dat[2]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[2]~data_lut  ; |TEST|UART_TEST:inst1|dat[2]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[1]~_emulated ; |TEST|UART_TEST:inst1|dat[1]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[1]~head_lut  ; |TEST|UART_TEST:inst1|dat[1]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst|cnt~9             ; |TEST|UART_TEST:inst|cnt~9             ; combout          ;
; |TEST|UART_TEST:inst|count~14          ; |TEST|UART_TEST:inst|count~14          ; combout          ;
; |TEST|UART_TEST:inst1|count~15         ; |TEST|UART_TEST:inst1|count~15         ; combout          ;
; |TEST|UART_TEST:inst1|dat[8]~latch     ; |TEST|UART_TEST:inst1|dat[8]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[7]~latch     ; |TEST|UART_TEST:inst1|dat[7]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[6]~latch     ; |TEST|UART_TEST:inst1|dat[6]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[5]~latch     ; |TEST|UART_TEST:inst1|dat[5]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[4]~latch     ; |TEST|UART_TEST:inst1|dat[4]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[3]~latch     ; |TEST|UART_TEST:inst1|dat[3]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[2]~latch     ; |TEST|UART_TEST:inst1|dat[2]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[1]~latch     ; |TEST|UART_TEST:inst1|dat[1]~latch     ; combout          ;
; |TEST|re1~output                       ; |TEST|re1~output                       ; o                ;
; |TEST|re1                              ; |TEST|re1                              ; padout           ;
; |TEST|finish1~output                   ; |TEST|finish1~output                   ; o                ;
; |TEST|finish1                          ; |TEST|finish1                          ; padout           ;
; |TEST|dat_out1[7]~output               ; |TEST|dat_out1[7]~output               ; o                ;
; |TEST|dat_out1[7]                      ; |TEST|dat_out1[7]                      ; padout           ;
; |TEST|dat_out1[6]~output               ; |TEST|dat_out1[6]~output               ; o                ;
; |TEST|dat_out1[6]                      ; |TEST|dat_out1[6]                      ; padout           ;
; |TEST|dat_out1[5]~output               ; |TEST|dat_out1[5]~output               ; o                ;
; |TEST|dat_out1[5]                      ; |TEST|dat_out1[5]                      ; padout           ;
; |TEST|dat_out1[4]~output               ; |TEST|dat_out1[4]~output               ; o                ;
; |TEST|dat_out1[4]                      ; |TEST|dat_out1[4]                      ; padout           ;
; |TEST|dat_out1[3]~output               ; |TEST|dat_out1[3]~output               ; o                ;
; |TEST|dat_out1[3]                      ; |TEST|dat_out1[3]                      ; padout           ;
; |TEST|dat_out1[2]~output               ; |TEST|dat_out1[2]~output               ; o                ;
; |TEST|dat_out1[2]                      ; |TEST|dat_out1[2]                      ; padout           ;
; |TEST|dat_out1[1]~output               ; |TEST|dat_out1[1]~output               ; o                ;
; |TEST|dat_out1[1]                      ; |TEST|dat_out1[1]                      ; padout           ;
; |TEST|dat_out1[0]~output               ; |TEST|dat_out1[0]~output               ; o                ;
; |TEST|dat_out1[0]                      ; |TEST|dat_out1[0]                      ; padout           ;
; |TEST|we2~input                        ; |TEST|we2~input                        ; o                ;
; |TEST|we2                              ; |TEST|we2                              ; padout           ;
; |TEST|we1~input                        ; |TEST|we1~input                        ; o                ;
; |TEST|we1                              ; |TEST|we1                              ; padout           ;
; |TEST|dat_in2[7]~input                 ; |TEST|dat_in2[7]~input                 ; o                ;
; |TEST|dat_in2[7]                       ; |TEST|dat_in2[7]                       ; padout           ;
; |TEST|dat_in2[6]~input                 ; |TEST|dat_in2[6]~input                 ; o                ;
; |TEST|dat_in2[6]                       ; |TEST|dat_in2[6]                       ; padout           ;
; |TEST|dat_in2[5]~input                 ; |TEST|dat_in2[5]~input                 ; o                ;
; |TEST|dat_in2[5]                       ; |TEST|dat_in2[5]                       ; padout           ;
; |TEST|dat_in2[4]~input                 ; |TEST|dat_in2[4]~input                 ; o                ;
; |TEST|dat_in2[4]                       ; |TEST|dat_in2[4]                       ; padout           ;
; |TEST|dat_in2[3]~input                 ; |TEST|dat_in2[3]~input                 ; o                ;
; |TEST|dat_in2[3]                       ; |TEST|dat_in2[3]                       ; padout           ;
; |TEST|dat_in2[2]~input                 ; |TEST|dat_in2[2]~input                 ; o                ;
; |TEST|dat_in2[2]                       ; |TEST|dat_in2[2]                       ; padout           ;
; |TEST|dat_in2[1]~input                 ; |TEST|dat_in2[1]~input                 ; o                ;
; |TEST|dat_in2[1]                       ; |TEST|dat_in2[1]                       ; padout           ;
; |TEST|dat_in2[0]~input                 ; |TEST|dat_in2[0]~input                 ; o                ;
; |TEST|dat_in2[0]                       ; |TEST|dat_in2[0]                       ; padout           ;
; |TEST|UART_TEST:inst|clk_out~clkctrl   ; |TEST|UART_TEST:inst|clk_out~clkctrl   ; outclk           ;
; |TEST|UART_TEST:inst1|start2~clkctrl   ; |TEST|UART_TEST:inst1|start2~clkctrl   ; outclk           ;
; |TEST|UART_TEST:inst|dat_o[8]~feeder   ; |TEST|UART_TEST:inst|dat_o[8]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[7]~feeder   ; |TEST|UART_TEST:inst|dat_o[7]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[6]~feeder   ; |TEST|UART_TEST:inst|dat_o[6]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[5]~feeder   ; |TEST|UART_TEST:inst|dat_o[5]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[4]~feeder   ; |TEST|UART_TEST:inst|dat_o[4]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[3]~feeder   ; |TEST|UART_TEST:inst|dat_o[3]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[2]~feeder   ; |TEST|UART_TEST:inst|dat_o[2]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[1]~feeder   ; |TEST|UART_TEST:inst|dat_o[1]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|clk_out~feeder    ; |TEST|UART_TEST:inst|clk_out~feeder    ; combout          ;
+----------------------------------------+----------------------------------------+------------------+


The following table displays output ports that do not toggle to 0 during simulation.
+----------------------------------------------------------------------------------------------------+
; Missing 0-Value Coverage                                                                           ;
+----------------------------------------+----------------------------------------+------------------+
; Node Name                              ; Output Port Name                       ; Output Port Type ;
+----------------------------------------+----------------------------------------+------------------+
; |TEST|UART_TEST:inst|re                ; |TEST|UART_TEST:inst|re                ; q                ;
; |TEST|UART_TEST:inst|dat_o[8]          ; |TEST|UART_TEST:inst|dat_o[8]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[7]          ; |TEST|UART_TEST:inst|dat_o[7]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[6]          ; |TEST|UART_TEST:inst|dat_o[6]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[5]          ; |TEST|UART_TEST:inst|dat_o[5]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[4]          ; |TEST|UART_TEST:inst|dat_o[4]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[3]          ; |TEST|UART_TEST:inst|dat_o[3]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[2]          ; |TEST|UART_TEST:inst|dat_o[2]          ; q                ;
; |TEST|UART_TEST:inst|dat_o[1]          ; |TEST|UART_TEST:inst|dat_o[1]          ; q                ;
; |TEST|UART_TEST:inst|nx_s.s1           ; |TEST|UART_TEST:inst|nx_s.s1           ; q                ;
; |TEST|UART_TEST:inst|timed             ; |TEST|UART_TEST:inst|timed             ; q                ;
; |TEST|UART_TEST:inst|re~3              ; |TEST|UART_TEST:inst|re~3              ; combout          ;
; |TEST|UART_TEST:inst1|nx_s.s2          ; |TEST|UART_TEST:inst1|nx_s.s2          ; q                ;
; |TEST|UART_TEST:inst1|timed2           ; |TEST|UART_TEST:inst1|timed2           ; q                ;
; |TEST|UART_TEST:inst1|nx_s.s3          ; |TEST|UART_TEST:inst1|nx_s.s3          ; q                ;
; |TEST|UART_TEST:inst|clk_out           ; |TEST|UART_TEST:inst|clk_out           ; q                ;
; |TEST|UART_TEST:inst|dat_o[0]          ; |TEST|UART_TEST:inst|dat_o[0]          ; q                ;
; |TEST|UART_TEST:inst|Selector8~0       ; |TEST|UART_TEST:inst|Selector8~0       ; combout          ;
; |TEST|UART_TEST:inst|\rec:count[3]     ; |TEST|UART_TEST:inst|\rec:count[3]     ; q                ;
; |TEST|UART_TEST:inst|\rec:count[0]     ; |TEST|UART_TEST:inst|\rec:count[0]     ; q                ;
; |TEST|UART_TEST:inst|\rec:count[2]     ; |TEST|UART_TEST:inst|\rec:count[2]     ; q                ;
; |TEST|UART_TEST:inst|\rec:count[1]     ; |TEST|UART_TEST:inst|\rec:count[1]     ; q                ;
; |TEST|UART_TEST:inst|Equal1~0          ; |TEST|UART_TEST:inst|Equal1~0          ; combout          ;
; |TEST|UART_TEST:inst|timed~0           ; |TEST|UART_TEST:inst|timed~0           ; combout          ;
; |TEST|UART_TEST:inst1|Selector9~0      ; |TEST|UART_TEST:inst1|Selector9~0      ; combout          ;
; |TEST|UART_TEST:inst1|Selector9~1      ; |TEST|UART_TEST:inst1|Selector9~1      ; combout          ;
; |TEST|UART_TEST:inst1|\sen:count[3]    ; |TEST|UART_TEST:inst1|\sen:count[3]    ; q                ;
; |TEST|UART_TEST:inst1|\sen:count[0]    ; |TEST|UART_TEST:inst1|\sen:count[0]    ; q                ;
; |TEST|UART_TEST:inst1|\sen:count[2]    ; |TEST|UART_TEST:inst1|\sen:count[2]    ; q                ;
; |TEST|UART_TEST:inst1|\sen:count[1]    ; |TEST|UART_TEST:inst1|\sen:count[1]    ; q                ;
; |TEST|UART_TEST:inst1|Equal2~0         ; |TEST|UART_TEST:inst1|Equal2~0         ; combout          ;
; |TEST|UART_TEST:inst1|timed2~0         ; |TEST|UART_TEST:inst1|timed2~0         ; combout          ;
; |TEST|UART_TEST:inst1|start2           ; |TEST|UART_TEST:inst1|start2           ; q                ;
; |TEST|UART_TEST:inst|mode.receive      ; |TEST|UART_TEST:inst|mode.receive      ; q                ;
; |TEST|UART_TEST:inst1|Selector10~2     ; |TEST|UART_TEST:inst1|Selector10~2     ; combout          ;
; |TEST|UART_TEST:inst|\cdiv:cnt[4]      ; |TEST|UART_TEST:inst|\cdiv:cnt[4]      ; q                ;
; |TEST|UART_TEST:inst|\cdiv:cnt[3]      ; |TEST|UART_TEST:inst|\cdiv:cnt[3]      ; q                ;
; |TEST|UART_TEST:inst|\cdiv:cnt[2]      ; |TEST|UART_TEST:inst|\cdiv:cnt[2]      ; q                ;
; |TEST|UART_TEST:inst|\cdiv:cnt[0]      ; |TEST|UART_TEST:inst|\cdiv:cnt[0]      ; q                ;
; |TEST|UART_TEST:inst|\cdiv:cnt[1]      ; |TEST|UART_TEST:inst|\cdiv:cnt[1]      ; q                ;
; |TEST|UART_TEST:inst|Add0~0            ; |TEST|UART_TEST:inst|Add0~0            ; combout          ;
; |TEST|UART_TEST:inst|Add0~1            ; |TEST|UART_TEST:inst|Add0~1            ; combout          ;
; |TEST|UART_TEST:inst|Equal0~0          ; |TEST|UART_TEST:inst|Equal0~0          ; combout          ;
; |TEST|UART_TEST:inst|clk_out~0         ; |TEST|UART_TEST:inst|clk_out~0         ; combout          ;
; |TEST|UART_TEST:inst|en                ; |TEST|UART_TEST:inst|en                ; q                ;
; |TEST|UART_TEST:inst1|Selector4~0      ; |TEST|UART_TEST:inst1|Selector4~0      ; combout          ;
; |TEST|UART_TEST:inst1|mode.receive~4   ; |TEST|UART_TEST:inst1|mode.receive~4   ; combout          ;
; |TEST|UART_TEST:inst|Selector7~0       ; |TEST|UART_TEST:inst|Selector7~0       ; combout          ;
; |TEST|UART_TEST:inst1|mode.send        ; |TEST|UART_TEST:inst1|mode.send        ; q                ;
; |TEST|UART_TEST:inst1|t                ; |TEST|UART_TEST:inst1|t                ; q                ;
; |TEST|UART_TEST:inst1|tx~2             ; |TEST|UART_TEST:inst1|tx~2             ; combout          ;
; |TEST|UART_TEST:inst|count~12          ; |TEST|UART_TEST:inst|count~12          ; combout          ;
; |TEST|UART_TEST:inst|Add1~0            ; |TEST|UART_TEST:inst|Add1~0            ; combout          ;
; |TEST|UART_TEST:inst|Add1~1            ; |TEST|UART_TEST:inst|Add1~1            ; combout          ;
; |TEST|UART_TEST:inst1|count~13         ; |TEST|UART_TEST:inst1|count~13         ; combout          ;
; |TEST|UART_TEST:inst1|Add2~0           ; |TEST|UART_TEST:inst1|Add2~0           ; combout          ;
; |TEST|UART_TEST:inst1|Add2~1           ; |TEST|UART_TEST:inst1|Add2~1           ; combout          ;
; |TEST|UART_TEST:inst1|Selector5~0      ; |TEST|UART_TEST:inst1|Selector5~0      ; combout          ;
; |TEST|UART_TEST:inst1|Selector5~1      ; |TEST|UART_TEST:inst1|Selector5~1      ; combout          ;
; |TEST|UART_TEST:inst|mode.receive~6    ; |TEST|UART_TEST:inst|mode.receive~6    ; combout          ;
; |TEST|UART_TEST:inst|cnt~7             ; |TEST|UART_TEST:inst|cnt~7             ; combout          ;
; |TEST|UART_TEST:inst|Add0~2            ; |TEST|UART_TEST:inst|Add0~2            ; combout          ;
; |TEST|UART_TEST:inst|cnt~8             ; |TEST|UART_TEST:inst|cnt~8             ; combout          ;
; |TEST|UART_TEST:inst|Add0~3            ; |TEST|UART_TEST:inst|Add0~3            ; combout          ;
; |TEST|UART_TEST:inst|Selector6~0       ; |TEST|UART_TEST:inst|Selector6~0       ; combout          ;
; |TEST|UART_TEST:inst1|Selector2~0      ; |TEST|UART_TEST:inst1|Selector2~0      ; combout          ;
; |TEST|UART_TEST:inst1|dat[8]~_emulated ; |TEST|UART_TEST:inst1|dat[8]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[8]~head_lut  ; |TEST|UART_TEST:inst1|dat[8]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[8]~data_lut  ; |TEST|UART_TEST:inst1|dat[8]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[7]~_emulated ; |TEST|UART_TEST:inst1|dat[7]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[7]~head_lut  ; |TEST|UART_TEST:inst1|dat[7]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[7]~data_lut  ; |TEST|UART_TEST:inst1|dat[7]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[6]~_emulated ; |TEST|UART_TEST:inst1|dat[6]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[6]~head_lut  ; |TEST|UART_TEST:inst1|dat[6]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[6]~data_lut  ; |TEST|UART_TEST:inst1|dat[6]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[5]~_emulated ; |TEST|UART_TEST:inst1|dat[5]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[5]~head_lut  ; |TEST|UART_TEST:inst1|dat[5]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[5]~data_lut  ; |TEST|UART_TEST:inst1|dat[5]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[4]~_emulated ; |TEST|UART_TEST:inst1|dat[4]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[4]~head_lut  ; |TEST|UART_TEST:inst1|dat[4]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[4]~data_lut  ; |TEST|UART_TEST:inst1|dat[4]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[3]~_emulated ; |TEST|UART_TEST:inst1|dat[3]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[3]~head_lut  ; |TEST|UART_TEST:inst1|dat[3]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[3]~data_lut  ; |TEST|UART_TEST:inst1|dat[3]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[2]~_emulated ; |TEST|UART_TEST:inst1|dat[2]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[2]~head_lut  ; |TEST|UART_TEST:inst1|dat[2]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[2]~data_lut  ; |TEST|UART_TEST:inst1|dat[2]~data_lut  ; combout          ;
; |TEST|UART_TEST:inst1|dat[1]~_emulated ; |TEST|UART_TEST:inst1|dat[1]~_emulated ; q                ;
; |TEST|UART_TEST:inst1|dat[1]~head_lut  ; |TEST|UART_TEST:inst1|dat[1]~head_lut  ; combout          ;
; |TEST|UART_TEST:inst|cnt~9             ; |TEST|UART_TEST:inst|cnt~9             ; combout          ;
; |TEST|UART_TEST:inst|count~14          ; |TEST|UART_TEST:inst|count~14          ; combout          ;
; |TEST|UART_TEST:inst1|count~15         ; |TEST|UART_TEST:inst1|count~15         ; combout          ;
; |TEST|UART_TEST:inst1|dat[8]~latch     ; |TEST|UART_TEST:inst1|dat[8]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[7]~latch     ; |TEST|UART_TEST:inst1|dat[7]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[6]~latch     ; |TEST|UART_TEST:inst1|dat[6]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[5]~latch     ; |TEST|UART_TEST:inst1|dat[5]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[4]~latch     ; |TEST|UART_TEST:inst1|dat[4]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[3]~latch     ; |TEST|UART_TEST:inst1|dat[3]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[2]~latch     ; |TEST|UART_TEST:inst1|dat[2]~latch     ; combout          ;
; |TEST|UART_TEST:inst1|dat[1]~latch     ; |TEST|UART_TEST:inst1|dat[1]~latch     ; combout          ;
; |TEST|re1~output                       ; |TEST|re1~output                       ; o                ;
; |TEST|re1                              ; |TEST|re1                              ; padout           ;
; |TEST|finish1~output                   ; |TEST|finish1~output                   ; o                ;
; |TEST|finish1                          ; |TEST|finish1                          ; padout           ;
; |TEST|dat_out1[7]~output               ; |TEST|dat_out1[7]~output               ; o                ;
; |TEST|dat_out1[7]                      ; |TEST|dat_out1[7]                      ; padout           ;
; |TEST|dat_out1[6]~output               ; |TEST|dat_out1[6]~output               ; o                ;
; |TEST|dat_out1[6]                      ; |TEST|dat_out1[6]                      ; padout           ;
; |TEST|dat_out1[5]~output               ; |TEST|dat_out1[5]~output               ; o                ;
; |TEST|dat_out1[5]                      ; |TEST|dat_out1[5]                      ; padout           ;
; |TEST|dat_out1[4]~output               ; |TEST|dat_out1[4]~output               ; o                ;
; |TEST|dat_out1[4]                      ; |TEST|dat_out1[4]                      ; padout           ;
; |TEST|dat_out1[3]~output               ; |TEST|dat_out1[3]~output               ; o                ;
; |TEST|dat_out1[3]                      ; |TEST|dat_out1[3]                      ; padout           ;
; |TEST|dat_out1[2]~output               ; |TEST|dat_out1[2]~output               ; o                ;
; |TEST|dat_out1[2]                      ; |TEST|dat_out1[2]                      ; padout           ;
; |TEST|dat_out1[1]~output               ; |TEST|dat_out1[1]~output               ; o                ;
; |TEST|dat_out1[1]                      ; |TEST|dat_out1[1]                      ; padout           ;
; |TEST|dat_out1[0]~output               ; |TEST|dat_out1[0]~output               ; o                ;
; |TEST|dat_out1[0]                      ; |TEST|dat_out1[0]                      ; padout           ;
; |TEST|we2~input                        ; |TEST|we2~input                        ; o                ;
; |TEST|we2                              ; |TEST|we2                              ; padout           ;
; |TEST|we1~input                        ; |TEST|we1~input                        ; o                ;
; |TEST|we1                              ; |TEST|we1                              ; padout           ;
; |TEST|dat_in2[7]~input                 ; |TEST|dat_in2[7]~input                 ; o                ;
; |TEST|dat_in2[7]                       ; |TEST|dat_in2[7]                       ; padout           ;
; |TEST|dat_in2[6]~input                 ; |TEST|dat_in2[6]~input                 ; o                ;
; |TEST|dat_in2[6]                       ; |TEST|dat_in2[6]                       ; padout           ;
; |TEST|dat_in2[5]~input                 ; |TEST|dat_in2[5]~input                 ; o                ;
; |TEST|dat_in2[5]                       ; |TEST|dat_in2[5]                       ; padout           ;
; |TEST|dat_in2[4]~input                 ; |TEST|dat_in2[4]~input                 ; o                ;
; |TEST|dat_in2[4]                       ; |TEST|dat_in2[4]                       ; padout           ;
; |TEST|dat_in2[3]~input                 ; |TEST|dat_in2[3]~input                 ; o                ;
; |TEST|dat_in2[3]                       ; |TEST|dat_in2[3]                       ; padout           ;
; |TEST|dat_in2[2]~input                 ; |TEST|dat_in2[2]~input                 ; o                ;
; |TEST|dat_in2[2]                       ; |TEST|dat_in2[2]                       ; padout           ;
; |TEST|dat_in2[1]~input                 ; |TEST|dat_in2[1]~input                 ; o                ;
; |TEST|dat_in2[1]                       ; |TEST|dat_in2[1]                       ; padout           ;
; |TEST|dat_in2[0]~input                 ; |TEST|dat_in2[0]~input                 ; o                ;
; |TEST|dat_in2[0]                       ; |TEST|dat_in2[0]                       ; padout           ;
; |TEST|UART_TEST:inst|clk_out~clkctrl   ; |TEST|UART_TEST:inst|clk_out~clkctrl   ; outclk           ;
; |TEST|UART_TEST:inst1|start2~clkctrl   ; |TEST|UART_TEST:inst1|start2~clkctrl   ; outclk           ;
; |TEST|UART_TEST:inst|dat_o[8]~feeder   ; |TEST|UART_TEST:inst|dat_o[8]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[7]~feeder   ; |TEST|UART_TEST:inst|dat_o[7]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[6]~feeder   ; |TEST|UART_TEST:inst|dat_o[6]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[5]~feeder   ; |TEST|UART_TEST:inst|dat_o[5]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[4]~feeder   ; |TEST|UART_TEST:inst|dat_o[4]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[3]~feeder   ; |TEST|UART_TEST:inst|dat_o[3]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[2]~feeder   ; |TEST|UART_TEST:inst|dat_o[2]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|dat_o[1]~feeder   ; |TEST|UART_TEST:inst|dat_o[1]~feeder   ; combout          ;
; |TEST|UART_TEST:inst|clk_out~feeder    ; |TEST|UART_TEST:inst|clk_out~feeder    ; combout          ;
+----------------------------------------+----------------------------------------+------------------+


+---------------------+
; Simulator INI Usage ;
+--------+------------+
; Option ; Usage      ;
+--------+------------+


+--------------------+
; Simulator Messages ;
+--------------------+
Info: *******************************************************************
Info: Running Quartus II Simulator
    Info: Version 9.0 Build 132 02/25/2009 SJ Full Version
    Info: Processing started: Fri Jan 03 22:03:50 2014
Info: Command: quartus_sim --read_settings_files=on --write_settings_files=off UART_TEST -c UART_TEST
Info: Using vector source file "C:/Users/Dawn/Desktop/WH4574/UART_TEST/TEST.vwf"
Info: Overwriting simulation input file with simulation results
    Info: A backup of TEST.vwf called UART_TEST.sim_ori.vwf has been created in the db folder
Warning: Can't display state machine states -- register holding state machine bit "|TEST|UART_TEST:inst1|mode.waiting" was synthesized away
Warning: Can't display state machine states -- register holding state machine bit "|TEST|UART_TEST:inst|mode.waiting" was synthesized away
Info: Inverted registers were found during simulation
    Info: Register: |TEST|UART_TEST:inst|clk_out
    Info: Register: |TEST|UART_TEST:inst1|clk_out
    Info: Register: |TEST|UART_TEST:inst|t
    Info: Register: |TEST|UART_TEST:inst1|t
Info: Option to preserve fewer signal transitions to reduce memory requirements is enabled
    Info: Simulation has been partitioned into sub-simulations according to the maximum transition count determined by the engine. Transitions from memory will be flushed out to disk at the end of each sub-simulation to reduce memory requirements.
Info: Simulation partitioned into 1 sub-simulations
Info: Simulation coverage is      52.37 %
Info: Number of transitions in simulation is 44560
Info: Vector file TEST.vwf is saved in VWF text format. You can compress it into CVWF format in order to reduce file size. For more details please refer to the Quartus II Help.
Info: Quartus II Simulator was successful. 0 errors, 2 warnings
    Info: Peak virtual memory: 157 megabytes
    Info: Processing ended: Fri Jan 03 22:03:52 2014
    Info: Elapsed time: 00:00:02
    Info: Total CPU time (on all processors): 00:00:02


